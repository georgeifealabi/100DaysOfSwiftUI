## 📅 Day 8 - Checkout 4
**Date:** August 11, 2025  
**Focus:** Challenge using throwing functions

---

### 💻 Challenge:
 The challenge is this: write a function that accepts an integer from 1 through 10,000, and returns the integer square root of that number. That sounds easy, but there are some catches:

 You can’t use Swift’s built-in sqrt() function or similar – you need to find the square root yourself.
 If the number is less than 1 or greater than 10,000 you should throw an “out of bounds” error.
 You should only consider integer square roots – don’t worry about the square root of 3 being 1.732, for example.
 If you can’t find the square root, throw a “no root” error.
 As a reminder, if you have number X, the square root of X will be another number that, when multiplied by itself, gives X. So, the square root of 9 is 3, because 3x3 is 9, and the square root of 25 is 5, because 5x5 is 25.


```swift
import Cocoa

/*
 The challenge is this: write a function that accepts an integer from 1 through 10,000, and returns the integer square root of that number. That sounds easy, but there are some catches:

 You can’t use Swift’s built-in sqrt() function or similar – you need to find the square root yourself.
 If the number is less than 1 or greater than 10,000 you should throw an “out of bounds” error.
 You should only consider integer square roots – don’t worry about the square root of 3 being 1.732, for example.
 If you can’t find the square root, throw a “no root” error.
 As a reminder, if you have number X, the square root of X will be another number that, when multiplied by itself, gives X. So, the square root of 9 is 3, because 3x3 is 9, and the square root of 25 is 5, because 5x5 is 25.
 */


//My attempt
enum SquareRootError: Error {
    case outOfBounds,
    noroot
}

func sqrCalculator(_ number: Int) throws -> Int {
    if (number * number) / number < 1 { throw SquareRootError.outOfBounds }
    if (number * number) / number > 10_000 { throw SquareRootError.outOfBounds }
    if (number * number) / number != number  {throw SquareRootError.noroot }
    else {return (number * number) / number}
}

let figure = 25

do {
    let result = try sqrCalculator(figure)
    print("The answer is: \(result)")
} catch SquareRootError.outOfBounds {
    print("This squareroot is Out of Bounds")
} catch SquareRootError.noroot {
    print("There is no square root")
} catch {
    print("Error")
}




//My second attempt

enum SquareRootError2: Error {
    case outOfBounds,
    noroot
}

func sqrCalculator2(_ number: Int) throws -> Int {
    
    if number < 1 || number > 10_000 {
        throw SquareRootError2.outOfBounds
    }
    
    for i in 1...100 {
        if i * i == number {
            return i
        }
        
    }
    
    throw SquareRootError2.noroot
}
    
    let figure2 = 25
    
    do {
        let result = try sqrCalculator2(figure2)
        print("The answer is: \(result)")
    } catch SquareRootError2.outOfBounds {
        print("This squareroot is Out of Bounds")
    } catch SquareRootError2.noroot {
        print("There is no square root")
    } catch {
        print("Error")
    }
    
    
    
    //===================================================================================
    //ChatGPT solution
    enum SquareRootError3: Error {
        case outOfBounds
        case noRoot
    }

    func integerSquareRoot(of number: Int) throws -> Int {
        // Step 1: Check bounds
        if number < 1 || number > 10_000 {
            throw SquareRootError3.outOfBounds
        }
        
        // Step 2: Brute force search from 1 to 100
        for i in 1...100 {
            if i * i == number {
                return i
            }
        }
        
        // Step 3: If we reach here, no integer root found
        throw SquareRootError3.noRoot
    }

    do {
        let root = try integerSquareRoot(of: 25)
        print("Square root is \(root)")
    } catch SquareRootError3.outOfBounds {
        print("Number must be between 1 and 10,000.")
    } catch SquareRootError3.noRoot {
        print("No integer square root found.")
    } catch {
        print("Unexpected error: \(error)")
    }
