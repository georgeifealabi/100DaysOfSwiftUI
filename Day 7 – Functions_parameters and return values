## ðŸ“… Day 7 â€“ Functions, parameters, and return values
**Date:** August 10, 2025  
**Focus:** Functions, parameters, and return values

---

### ðŸ’» Code Example



```swift
import Cocoa

//Day 7 â€“ Functions, parameters, and return values

//How to reuse code with functions

//Example of a Function
func showWelcome() {
    print("Welcome to my app!")
    print("By default This prints out a conversion")
    print("chart from centimeters to inches, but you")
    print("can also set a custom range if you want")
}

showWelcome()


//Example of a Function using its options and parameter
func printTimesTables(number: Int) {
    for i in 1...12 {
        print("\(i) * \(number) is \(i * number)")
    }
}

printTimesTables(number: 5)
print()

//Another example of a Function using its options and parameter
func printTimesTables2(number: Int, end: Int) {
    for i in 1...end {
        print("\(i) * \(number) is \(i * number)")
    }
}

printTimesTables2(number: 7, end: 20)               //The numbers in the function example (7 & 20) are called arguments
print()

//==================================================================
//How to return values from functions

//Example of how to return a value from a function

func rollDice() -> Int {
    return Int.random(in: 1...6)
}

let result = rollDice()
print(result)


//==================================================================
//Exercise 1

/*
 My attempt
 func letterChecker(word1: String, word2: String) -> Bool {
 let firstWord = word1.sorted()
 let secondWord = word2.sorted()
 
 if firstWord[1][2] == secondWord[1][2] {
 return true
 else false
 }
 }
 */

//Paul's solution 1:
func letterChecker(word1: String, word2: String) -> Bool {
    let firstWord = word1.sorted()
    let secondWord = word2.sorted()
    return firstWord == secondWord
}

//Paul's solution 2:
func letterChecker2(word1: String, word2: String) -> Bool {
    word1.sorted() == word2.sorted()                                //in this solution, there's no need to write 'return' as long as there's only one line of code that will return the data requested
}

//==================================================================
//Exercise 2 - reduce the first code below to one line

//Code 1
func pythagoras(a: Double, b: Double) -> Double {
    let input = a * a + b * b
    let root = sqrt(input)
    return root
}

let c = pythagoras(a: 3, b: 4)
print(c)


//Code 2 - my attempt (THIS WAS CORRECT)
func pythagoras2(a: Double, b: Double) -> Double {
    sqrt((a * a + b * b))
}

let d = pythagoras2(a: 5, b: 6)



//How to return multiple values from functions

//Example of a tuple
func getUser3() -> (firstName: String, lastName: String) {
    (firstName: "Taylor", lastName: "Swift")             //Writing this is like this also works --->    ("Taylor", "Swift")
}

let user3 = getUser3()
print("Name: \(user3.firstName) \(user3.lastName)")

//OR
let (firstName, _) = getUser3()
print("Name: \(firstName)")



//How to customize parameter labels
func hireEmployee (name: String) {}
func hireEmployee (title: String) {}
func hireEmployee (location: String) {}


let lyric = "I see a red door and i want it painted balck."
print(lyric.hasPrefix("I see"))

func isUppercase(_ string: String) -> Bool {
    string == string.uppercased()
}

let string = "HELLO, WORLD"
let result2 = isUppercase(string)


func printTimesTables(for number: Int) {
    for i in 1...12 {
        print("\(i) x \(number) is \(i * number)")
    }
}

printTimesTables(for: 5)

